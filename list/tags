!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Add	list.cpp	/^void List::Add(ListNode* node)$/;"	f	class:List	signature:(ListNode* node)
Add	list.cpp	/^void List::Add(void* data)$/;"	f	class:List	signature:(void* data)
Add	list.h	/^		void Add(ListNode* node);$/;"	p	class:CList	access:public	signature:(ListNode* node)
Add	list.h	/^		void Add(ListNode* node);$/;"	p	class:List	access:public	signature:(ListNode* node)
Add	list.h	/^		void Add(void* data);$/;"	p	class:CList	access:public	signature:(void* data)
Add	list.h	/^		void Add(void* data);$/;"	p	class:List	access:public	signature:(void* data)
Back	list.cpp	/^void* List::Back()$/;"	f	class:List	signature:()
Back	list.h	/^		void* Back();$/;"	p	class:List	access:public	signature:()
CList	list.h	/^		CList();$/;"	p	class:CList	access:public	signature:()
CList	list.h	/^class CList$/;"	c
CList::Add	list.h	/^		void Add(ListNode* node);$/;"	p	class:CList	access:public	signature:(ListNode* node)
CList::Add	list.h	/^		void Add(void* data);$/;"	p	class:CList	access:public	signature:(void* data)
CList::CList	list.h	/^		CList();$/;"	p	class:CList	access:public	signature:()
CList::Clear	list.h	/^		void Clear();$/;"	p	class:CList	access:public	signature:()
CList::Empty	list.h	/^		bool Empty();$/;"	p	class:CList	access:public	signature:()
CList::Find	list.h	/^		ListNode* Find(void* data);$/;"	p	class:CList	access:public	signature:(void* data)
CList::Find	list.h	/^		bool Find(ListNode* node);$/;"	p	class:CList	access:public	signature:(ListNode* node)
CList::Head	list.h	/^		ListNode* Head();$/;"	p	class:CList	access:public	signature:()
CList::Insert	list.h	/^		void Insert(ListNode* element,ListNode* data);$/;"	p	class:CList	access:public	signature:(ListNode* element,ListNode* data)
CList::Insert	list.h	/^		void Insert(ListNode* element,void* data);$/;"	p	class:CList	access:public	signature:(ListNode* element,void* data)
CList::Remove	list.h	/^		void Remove(ListNode* node);$/;"	p	class:CList	access:public	signature:(ListNode* node)
CList::Remove	list.h	/^		void Remove(void* data);$/;"	p	class:CList	access:public	signature:(void* data)
CList::Size	list.h	/^		size_t Size();$/;"	p	class:CList	access:public	signature:()
CList::m_nSize	list.h	/^		size_t m_nSize;$/;"	m	class:CList	access:private
CList::m_pHead	list.h	/^		ListNode* m_pHead;$/;"	m	class:CList	access:private
CList::~CList	list.h	/^		~CList();$/;"	p	class:CList	access:public	signature:()
CPP	makefile	/^CPP=g++$/;"	m
CPPFLAG	makefile	/^CPPFLAG=-g$/;"	m
Clear	list.cpp	/^void List::Clear()$/;"	f	class:List	signature:()
Clear	list.h	/^		void Clear();$/;"	p	class:CList	access:public	signature:()
Clear	list.h	/^		void Clear();$/;"	p	class:List	access:public	signature:()
EXE	makefile	/^EXE=list$/;"	m
Empty	list.cpp	/^bool List::Empty()$/;"	f	class:List	signature:()
Empty	list.h	/^		bool Empty();$/;"	p	class:CList	access:public	signature:()
Empty	list.h	/^		bool Empty();$/;"	p	class:List	access:public	signature:()
Find	list.cpp	/^ListNode* List::Find(void* data)$/;"	f	class:List	signature:(void* data)
Find	list.cpp	/^bool List::Find(ListNode* node)$/;"	f	class:List	signature:(ListNode* node)
Find	list.h	/^		ListNode* Find(void* data);$/;"	p	class:CList	access:public	signature:(void* data)
Find	list.h	/^		ListNode* Find(void* data);$/;"	p	class:List	access:public	signature:(void* data)
Find	list.h	/^		bool Find(ListNode* node);$/;"	p	class:CList	access:public	signature:(ListNode* node)
Find	list.h	/^		bool Find(ListNode* node);$/;"	p	class:List	access:public	signature:(ListNode* node)
Front	list.cpp	/^void* List::Front()$/;"	f	class:List	signature:()
Front	list.h	/^		void* Front();$/;"	p	class:List	access:public	signature:()
Head	list.cpp	/^ListNode* List::Head()$/;"	f	class:List	signature:()
Head	list.h	/^		ListNode* Head();$/;"	p	class:CList	access:public	signature:()
Head	list.h	/^		ListNode* Head();$/;"	p	class:List	access:public	signature:()
Insert	list.cpp	/^void List::Insert(ListNode* element,ListNode* data)$/;"	f	class:List	signature:(ListNode* element,ListNode* data)
Insert	list.cpp	/^void List::Insert(ListNode* element,void* data)$/;"	f	class:List	signature:(ListNode* element,void* data)
Insert	list.h	/^		void Insert(ListNode* element,ListNode* data);$/;"	p	class:CList	access:public	signature:(ListNode* element,ListNode* data)
Insert	list.h	/^		void Insert(ListNode* element,ListNode* data);$/;"	p	class:List	access:public	signature:(ListNode* element,ListNode* data)
Insert	list.h	/^		void Insert(ListNode* element,void* data);$/;"	p	class:CList	access:public	signature:(ListNode* element,void* data)
Insert	list.h	/^		void Insert(ListNode* element,void* data);$/;"	p	class:List	access:public	signature:(ListNode* element,void* data)
List	list.cpp	/^List::List()$/;"	f	class:List	signature:()
List	list.h	/^		List();$/;"	p	class:List	access:public	signature:()
List	list.h	/^class List$/;"	c
List::Add	list.cpp	/^void List::Add(ListNode* node)$/;"	f	class:List	signature:(ListNode* node)
List::Add	list.cpp	/^void List::Add(void* data)$/;"	f	class:List	signature:(void* data)
List::Add	list.h	/^		void Add(ListNode* node);$/;"	p	class:List	access:public	signature:(ListNode* node)
List::Add	list.h	/^		void Add(void* data);$/;"	p	class:List	access:public	signature:(void* data)
List::Back	list.cpp	/^void* List::Back()$/;"	f	class:List	signature:()
List::Back	list.h	/^		void* Back();$/;"	p	class:List	access:public	signature:()
List::Clear	list.cpp	/^void List::Clear()$/;"	f	class:List	signature:()
List::Clear	list.h	/^		void Clear();$/;"	p	class:List	access:public	signature:()
List::Empty	list.cpp	/^bool List::Empty()$/;"	f	class:List	signature:()
List::Empty	list.h	/^		bool Empty();$/;"	p	class:List	access:public	signature:()
List::Find	list.cpp	/^ListNode* List::Find(void* data)$/;"	f	class:List	signature:(void* data)
List::Find	list.cpp	/^bool List::Find(ListNode* node)$/;"	f	class:List	signature:(ListNode* node)
List::Find	list.h	/^		ListNode* Find(void* data);$/;"	p	class:List	access:public	signature:(void* data)
List::Find	list.h	/^		bool Find(ListNode* node);$/;"	p	class:List	access:public	signature:(ListNode* node)
List::Front	list.cpp	/^void* List::Front()$/;"	f	class:List	signature:()
List::Front	list.h	/^		void* Front();$/;"	p	class:List	access:public	signature:()
List::Head	list.cpp	/^ListNode* List::Head()$/;"	f	class:List	signature:()
List::Head	list.h	/^		ListNode* Head();$/;"	p	class:List	access:public	signature:()
List::Insert	list.cpp	/^void List::Insert(ListNode* element,ListNode* data)$/;"	f	class:List	signature:(ListNode* element,ListNode* data)
List::Insert	list.cpp	/^void List::Insert(ListNode* element,void* data)$/;"	f	class:List	signature:(ListNode* element,void* data)
List::Insert	list.h	/^		void Insert(ListNode* element,ListNode* data);$/;"	p	class:List	access:public	signature:(ListNode* element,ListNode* data)
List::Insert	list.h	/^		void Insert(ListNode* element,void* data);$/;"	p	class:List	access:public	signature:(ListNode* element,void* data)
List::List	list.cpp	/^List::List()$/;"	f	class:List	signature:()
List::List	list.h	/^		List();$/;"	p	class:List	access:public	signature:()
List::Remove	list.cpp	/^void List::Remove(ListNode* node)$/;"	f	class:List	signature:(ListNode* node)
List::Remove	list.cpp	/^void List::Remove(void* data)$/;"	f	class:List	signature:(void* data)
List::Remove	list.h	/^		void Remove(ListNode* node);$/;"	p	class:List	access:public	signature:(ListNode* node)
List::Remove	list.h	/^		void Remove(void* data);$/;"	p	class:List	access:public	signature:(void* data)
List::Size	list.cpp	/^size_t List::Size()$/;"	f	class:List	signature:()
List::Size	list.h	/^		size_t Size();$/;"	p	class:List	access:public	signature:()
List::Tail	list.cpp	/^ListNode* List::Tail()$/;"	f	class:List	signature:()
List::Tail	list.h	/^		ListNode* Tail();$/;"	p	class:List	access:public	signature:()
List::m_nSize	list.h	/^		size_t m_nSize;$/;"	m	class:List	access:private
List::m_pHead	list.h	/^		ListNode* m_pHead;$/;"	m	class:List	access:private
List::m_pTail	list.h	/^		ListNode* m_pTail;$/;"	m	class:List	access:private
List::~List	list.cpp	/^List::~List()$/;"	f	class:List	signature:()
List::~List	list.h	/^		~List();$/;"	p	class:List	access:public	signature:()
ListNode	list.h	/^		ListNode()$/;"	f	struct:ListNode	access:public	signature:()
ListNode	list.h	/^struct ListNode$/;"	s
ListNode::ListNode	list.h	/^		ListNode()$/;"	f	struct:ListNode	access:public	signature:()
ListNode::data	list.h	/^		void* data;$/;"	m	struct:ListNode	access:public
ListNode::next	list.h	/^		struct ListNode* next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode	access:public
ListNode::prev	list.h	/^		struct ListNode* prev;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode	access:public
PrintList	main.cpp	/^void PrintList(List& ls)$/;"	f	signature:(List& ls)
Remove	list.cpp	/^void List::Remove(ListNode* node)$/;"	f	class:List	signature:(ListNode* node)
Remove	list.cpp	/^void List::Remove(void* data)$/;"	f	class:List	signature:(void* data)
Remove	list.h	/^		void Remove(ListNode* node);$/;"	p	class:CList	access:public	signature:(ListNode* node)
Remove	list.h	/^		void Remove(ListNode* node);$/;"	p	class:List	access:public	signature:(ListNode* node)
Remove	list.h	/^		void Remove(void* data);$/;"	p	class:CList	access:public	signature:(void* data)
Remove	list.h	/^		void Remove(void* data);$/;"	p	class:List	access:public	signature:(void* data)
Size	list.cpp	/^size_t List::Size()$/;"	f	class:List	signature:()
Size	list.h	/^		size_t Size();$/;"	p	class:CList	access:public	signature:()
Size	list.h	/^		size_t Size();$/;"	p	class:List	access:public	signature:()
Tail	list.cpp	/^ListNode* List::Tail()$/;"	f	class:List	signature:()
Tail	list.h	/^		ListNode* Tail();$/;"	p	class:List	access:public	signature:()
_LIST_H_	list.h	20;"	d
data	list.h	/^		void* data;$/;"	m	struct:ListNode	access:public
m_nSize	list.h	/^		size_t m_nSize;$/;"	m	class:CList	access:private
m_nSize	list.h	/^		size_t m_nSize;$/;"	m	class:List	access:private
m_pHead	list.h	/^		ListNode* m_pHead;$/;"	m	class:CList	access:private
m_pHead	list.h	/^		ListNode* m_pHead;$/;"	m	class:List	access:private
m_pTail	list.h	/^		ListNode* m_pTail;$/;"	m	class:List	access:private
main	main.cpp	/^int main()$/;"	f	signature:()
next	list.h	/^		struct ListNode* next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode	access:public
prev	list.h	/^		struct ListNode* prev;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode	access:public
~CList	list.h	/^		~CList();$/;"	p	class:CList	access:public	signature:()
~List	list.cpp	/^List::~List()$/;"	f	class:List	signature:()
~List	list.h	/^		~List();$/;"	p	class:List	access:public	signature:()
